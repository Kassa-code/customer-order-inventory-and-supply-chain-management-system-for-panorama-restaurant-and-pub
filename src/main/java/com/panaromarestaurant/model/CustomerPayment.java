package com.panaromarestaurant.model;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.hibernate.validator.constraints.Length;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity // Marks this class as a JPA entity, mapping it to a table in the database
@Table(name = "payment") // Specifies that this entity is mapped to the "payment" table

@Data // Lombok annotation to auto-generate getters, setters, toString, equals, and
      // hashCode methods
@AllArgsConstructor // Lombok generates a constructor with all fields as parameters
@NoArgsConstructor // Lombok generates a no-argument constructor (required by JPA)

@JsonInclude(value = Include.NON_NULL) // Exclude fields with null values from the JSON response
public class CustomerPayment {

    @Id // Marks this field as the primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Specifies that the ID is auto-generated by the database
    private Integer id; // Unique identifier for the customer payment record

    @Column(name = "bill_no") // Maps this field to the "bill_no" column in the database
    @Length(max = 8) // Restricts the length of the bill number to a maximum of 8 characters
    @NotNull // Ensures this field is not null when validated
    private String bill_no; // Unique bill number assigned to the payment

    @NotNull // This field is required and must not be null
    private BigDecimal total_amount; // Total amount of the customerâ€™s bill

    @NotNull // This field is required and must not be null
    private BigDecimal paid_amount; // Amount paid by the customer

    @NotNull // This field is required and must not be null
    private BigDecimal balance_amount; // Remaining amount to be paid (total - paid)


    @NotNull // This field is required and must not be null
    private Integer added_user_id; // ID of the user who added the record (for audit purposes)

    @NotNull // This field is required and must not be null
    private LocalDateTime added_datetime; // Timestamp of when the record was created

    // ---------- RELATIONSHIPS ----------

    @ManyToOne // Many payments can have the same status (e.g., "Paid", "Pending")
    @JoinColumn(name = "payment_status_id", referencedColumnName = "id") // Foreign key column in "payment" table
    private CustomerPaymentStatus payment_status_id; // Reference to the payment status entity

    @ManyToOne // Many payments can use the same payment method (e.g., "Cash", "Card")
    @JoinColumn(name = "payment_method_id", referencedColumnName = "id") // Foreign key column in "payment" table
    private CustomerPaymentMethod payment_method_id; // Reference to the payment method entity

    @ManyToOne // Many payments can be associated with one order process
    @JoinColumn(name = "order_process_id", referencedColumnName = "id") // Foreign key to the order process
    private OrderProcess order_process_id; // Reference to the order process (e.g., dine-in or takeaway order)
}
