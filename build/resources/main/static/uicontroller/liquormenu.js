// On browser window load event
// Execute these functions once the page fully loads
window.addEventListener("load", () => {
  refreshLiquorMenuTable(); // Load and display the liquormenu table data
  refreshLiquorMenuForm();  // Reset and initialize the liquormenu form for new entry
});

// Function to refresh and reload the LiquorMenu table data
// This should be called after any CRUD action: submit, update, or delete
const refreshLiquorMenuTable = () => {

  // Fetch all liquormenu records from backend API via GET request
  let liquormenus = getServiceRequest('/liquormenu/activelist');

  // Define the list of properties (columns) to display in the table for each liquormenu entry
  // Includes photo(s), name, price, and a status icon generated by a function
  let propertyList = [
    { propertyName: "liquormenuphoto", dataType: "image-array" }, // Render as one or more images
    { propertyName: "name", dataType: "string" },                  // Liquor menu item name
    { propertyName: "liquormenuprice", dataType: "decimal" },      // Price, formatted as decimal
    { propertyName: getLiquorMenuStatus, dataType: "function" }    // Status icon, dynamically generated
  ];

  // Populate the liquormenu table body with fetched data
  // Attach handlers for edit (refill form), delete, and view actions per row
  fillDataIntoTable(
    tableLiquorMenuBody,
    liquormenus,
    propertyList,
    liquormenuMenuFormRefill,
    liquormenuMenuDelete,
    liquormenuMenuView
  );

  // Iterate over each liquormenu entry to check for special conditions
  for (const index in liquormenus) {
    // If the liquormenu status is "Discontinued", hide its update button in the row
    if (liquormenus[index].liquormenu_status_id.name === "Discontinued") {
      // Traverse DOM to find the update button for this row and hide it using "d-none" class
      tableLiquorMenuBody.children[index].lastChild.children[0].children[1].children[0]
        .children[1].classList.add("d-none");
    }
  }

  // Initialize DataTables plugin on the liquormenu table for enhanced UI features:
  // pagination, sorting, filtering/search, and responsive layout
  $("#tableLiquorMenu").DataTable();
}

// Function to reset and initialize the LiquorMenu form to its default state
const refreshLiquorMenuForm = () => {

  // Initialize the global 'liquormenu' object to hold form data for submission
  liquormenu = new Object();

  // Create an empty array to hold ingredient items associated with this liquormenu
  liquormenu.liquorMenuHasIngredientList = new Array();

  // Reset all form fields and inputs to their initial values
  formLiquorMenu.reset();

  // Clear the photo file input field
  liquormenuPhotoInput.value = "";

  // Set the photo preview image to the default liquor image placeholder
  liquormenuPhotoPreview.src = "/images/liquor.jpg";

  // Reset all dropdowns and text inputs to default using a helper function
  setDefault([
    selectLiquormenuCategory,
    selectLiquormenuSubCategory,
    selectCategorySize,
    textPrice,
    selectStatus,
    textLiquorMenuName
  ]);

  // Fetch data for all dropdown lists from backend API endpoints
  let liquormenucategories = getServiceRequest('liquormenucategory/alldata');
  let liquormenusubcategories = getServiceRequest('liquormenusubcategory/alldata');
  let liquormenucategorysizes = getServiceRequest('liquormenutype/alldata');
  let liquormenucategorystatus = getServiceRequest('liquormenustatus/alldata');

  // Populate the Category dropdown with fetched liquormenu categories
  fillDataIntoSelect(
    selectLiquormenuCategory,
    "Please Select Category",
    liquormenucategories,
    "name"
  );

  // Populate the Subcategory dropdown
  fillDataIntoSelect(
    selectLiquormenuSubCategory,
    "Please Select Sub Category",
    liquormenusubcategories,
    "name"
  );

  // Populate the Size/Type dropdown
  fillDataIntoSelect(
    selectCategorySize,
    "Please Select Size",
    liquormenucategorysizes,
    "name"
  );

  // Populate the Status dropdown
  fillDataIntoSelect(
    selectStatus,
    "Please Select Status",
    liquormenucategorystatus,
    "name"
  );

  // Hide the Update button (used only when editing existing liquormenu)
  buttonUpdate.classList.add("d-none");

  // Show the Submit button (used for adding a new liquormenu)
  buttonSubmit.classList.remove("d-none");

  // Reset and refresh the liquormenu's inner ingredient form and table
  refreshLiquorMenuInnerFom();
}


// Function to check if the selected liquormenu ingredient item already exists 
const checkItemExt = () => {

  // Convert the selected item from dropdown (JSON string) to an object
  // Example: '{"id":1,"name":"Sugar"}' becomes {id: 1, name: "Sugar"}
  let selectedItem = JSON.parse(selectItems.value);

  // Search for the selected item's ID in the current liquormenu ingredient list
  // Create an array of ingredient IDs and check if the selected item's ID is present
  let extIndex = liquormenu.liquorMenuHasIngredientList
    .map(liquormenuItem => liquormenuItem.ingredients_id.id) // Extract IDs from existing liquormenu ingredient items
    .indexOf(selectedItem.id);                               // Find index of selected item ID

  // If the item is found (already exists), show a warning alert to the user
  if (extIndex > -1) {
    Swal.fire({
      title: "Selected Item Already Exists..!",
      text: "Please select another item.",
      icon: "warning",
      width: "20em",
      showConfirmButton: false,
      timer: 2000
    });

    // Clear and reset the inner liquormenu ingredient form to allow selecting a different item
    refreshLiquorMenuInnerFom();
  }
}



// Function to refresh the inner form of the liquormenu
const refreshLiquorMenuInnerFom = () => {

  // Initialize a new empty object for the ingredient item form data
  liquormenuHasItem = new Object();

  // Fetch all ingredient items from backend API to populate the dropdown
  let items = getServiceRequest("/ingredient/alldata");

  // Populate the "Items" dropdown with both item code and item name for better clarity
  // Example format: "ING001 - Sugar"
  fillDataIntoSelectTwo(selectItems, "Please Select Items", items, "itemcode", "itemname");

  // Reset dropdown and quantity inputs to default (empty) state
  setDefault([selectItems, textQuantity]);

  // Hide the "Update" button, as this is not edit mode
  buttonInnerUpdate.classList.add("d-none");

  // Show the "Submit" button, allowing new item addition
  buttonInnerSubmit.classList.remove("d-none");

  // Define how each column in the ingredient list table will display data
  let propertyList = [
    { propertyName: generateItemName, dataType: "function" }, // Display combined item code + name
    { propertyName: "qty", dataType: "decimal" },             // Display quantity with decimal formatting
  ];

  // Fill the ingredient table body with current ingredient list items
  // Also attach form refill and delete handlers for row actions
  fillDataIntoInnerTable(
    tableLiquorMenuItemBody,
    liquormenu.liquorMenuHasIngredientList,
    propertyList,
    liquormenuIngredientFormRefill,  // Called to refill form when editing an item
    liquormenuIngredientDelete,      // Called to delete an ingredient from the list
    true                            // Enable action buttons on each row
  );

  // Initialize DataTables plugin on the ingredient table for features like sort, search, pagination
  $("#tableLiquorMenuItem").DataTable();
}

// Define a function to generate item name
const generateItemName = (ob) => {
  return ob.ingredients_id.itemname;
}

// Define a function to refill the inner form when editing an existing item
const liquormenuIngredientFormRefill = (ob, index) => {

  // Store the index of the item being edited (used later to update the correct row)
  innerFormIndex = index;

  // Deep copy the selected item object to avoid directly modifying the original in the list
  liquormenuHasItem = JSON.parse(JSON.stringify(ob));     // Editable copy for the form
  oldliquormenuHasItem = JSON.parse(JSON.stringify(ob));  // Original copy for comparison/rollback

  // Set the item dropdown to the selected ingredient
  // Dropdown values are JSON strings like {"id":1,"name":"Sugar"}
  selectItems.value = JSON.stringify(liquormenuHasItem.ingredients_id);

  // Fill the quantity input field with the current quantity
  textQuantity.value = liquormenuHasItem.qty;

  // Toggle buttons to show update mode
  buttonInnerUpdate.classList.remove("d-none");  // Show Update button
  buttonInnerSubmit.classList.add("d-none");    // Hide Submit button to prevent duplicates
}

// Define a function to delete a form item (ingredient from submenu)
const liquormenuIngredientDelete = (ob, index) => {

  // Show confirmation popup with selected item details (name and quantity)
  Swal.fire({
    title: "Are you sure to remove the following Item?",
    html:
      "<div style='text-align:left; font-size:14px'>" +
      "🥫 <b>Item Name:</b> " + ob.ingredients_id.itemname + "<br>" +
      "🔢 <b>Quantity:</b> " + ob.qty +
      "</div>",
    icon: "warning",               
    showCancelButton: true,       
    width: "20em",                 
    confirmButtonColor: "#3085d6", 
    cancelButtonColor: "#d33",     
    confirmButtonText: "Yes, Remove Item" 
  }).then((result) => {

    // If user confirms item removal
    if (result.isConfirmed) {

      // Show success message briefly after removal
      Swal.fire({
        icon: "success",
        width: "20em",
        title: "Item Removed!",
        text: "Item removed successfully from the list.",
        timer: 1500,
        showConfirmButton: false
      });

      // Find the index of the item to delete by ingredient ID
      let extIndex = liquormenu.liquorMenuHasIngredientList
        .map((orderitem) => orderitem.ingredients_id.id)  // Extract array of ingredient IDs
        .indexOf(ob.ingredients_id.id);                   // Find index of item to delete

      // If found, remove the item from the ingredient list array
      if (extIndex !== -1) {
        liquormenu.liquorMenuHasIngredientList.splice(extIndex, 1);
      }

      // Refresh inner form and ingredient table to update UI
      refreshLiquorMenuInnerFom();
    }
  });
}

// Define a function to submit the inner form (add a new ingredient item)
const buttonLiquorMenuInnerSubmit = () => {
  // Log the current ingredient item object for debugging
  console.log(liquormenuHasItem);

  // Show confirmation popup before adding the item
  Swal.fire({
    title: "Are you sure to add the following Item?",
    html:
      "<div style='text-align:left; font-size:14px'>" +
      "🥫 <b>Item Name:</b> " + liquormenuHasItem.ingredients_id.itemname + "<br>" +
      "🔢 <b>Quantity:</b> " + liquormenuHasItem.qty +
      "</div>",
    icon: "warning",               
    width: "20em",                 
    showCancelButton: true,        
    confirmButtonColor: "#3085d6", 
    cancelButtonColor: "#d33",   
    confirmButtonText: "Yes, Add Item" 
  }).then((result) => {
    // If user confirms adding the item
    if (result.isConfirmed) {
      // Show success message briefly
      Swal.fire({
        icon: "success",
        width: "20em",
        title: "Item Added Successfully!",
        timer: 1500,
        showConfirmButton: false
      });

      // Add the ingredient item to the submenu's ingredient list
      liquormenu.liquorMenuHasIngredientList.push(liquormenuHasItem);

      // Refresh the inner form and ingredient list table
      refreshLiquorMenuInnerFom();
    }
  });
}

// Define a function to update the inner form (edit an existing ingredient item)
const buttonLiquorMenuInnerUpdate = () => {
  // Log the updated item object to the console for debugging
  console.log(liquormenuHasItem);

  // Check if quantity or item was changed compared to the original
  if (liquormenuHasItem.qty != oldliquormenuHasItem.qty) {

    let updates = ""; // String to hold descriptions of what changed

    // Check if the ingredient item itself was changed
    if (liquormenuHasItem.ingredients_id != oldliquormenuHasItem.ingredients_id)
      updates += "🍽️ Item is changed..! <br>";

    // Check if the quantity was changed
    if (liquormenuHasItem.qty != oldliquormenuHasItem.qty)
      updates += "🔢 Quantity is changed..! <br>";

    // Show confirmation popup summarizing changes
    Swal.fire({
      title: "Are you sure you want to update the following Item?",
      html:
        "<div style='text-align:left; font-size:14px'>" +
        "🍽️ <b>Item Name:</b> " + liquormenuHasItem.ingredients_id.itemname + "<br>" +
        "🔢 <b>Quantity:</b> " + liquormenuHasItem.qty + "<br><br>" +
        updates + // Only show if changes exist
        "</div>",
      icon: "warning",            
      width: "20em",              
      showCancelButton: true,    
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, Update Item"
    }).then((result) => {
      // If user confirms the update
      if (result.isConfirmed) {
        // Replace the original item in the list with the updated one using stored index
        liquormenu.liquorMenuHasIngredientList[innerFormIndex] = liquormenuHasItem;

        // Show a quick success message
        Swal.fire({
          title: "Item Updated Successfully!",
          icon: "success",
          width: "20em",
          showConfirmButton: false,
          timer: 1500
        });

        // Reset the inner form and refresh the table to reflect changes
        refreshLiquorMenuInnerFom();
      }
    });

  } else {
    // If no changes detected and update was attempted, show info message
    Swal.fire({
      title: "No Updates",
      text: "Nothing to update..!",
      icon: "info",
      width: "20em",
      showConfirmButton: false,
      timer: 1500
    });
  }
}


/// Category has a one-to-many relationship with Subcategory.
// But it does NOT have a direct relationship with Ingredients (no foreign key).
// So, this dropdown is only for UI filtering or selection, not for validation or data integrity.

// Get the category dropdown element by its ID
const selectCategoryElement = document.querySelector("#selectLiquormenuCategory");

// When user changes the selected category...
selectCategoryElement.addEventListener("change", () => {
  // Parse the selected option's value, which is a JSON string of the full category object
  let category = JSON.parse(selectCategoryElement.value);

  // Get the category name to use it for other purposes (like assigning to submenu name)
  const categoryName = category.name;

  // Visually mark this dropdown as valid and interacted with:
  selectCategoryElement.classList.remove("is-invalid");
  selectCategoryElement.classList.add("is-valid");
  selectCategoryElement.style.border = "2px solid green";
  selectCategoryElement.style.backgroundColor = "#c6f6d5";

  // Automatically set the submenu item name input field with the selected category name
  textLiquorMenuName.value = categoryName;

  // Fetch all subcategories belonging to this category from backend API
  // The API expects the category ID as a query parameter (?categoryid=)
  // (Backend likely uses @RequestParam("categoryid") to get this)
  let subcategoriesByCategory = getServiceRequest('/liquormenusubcategory/bycategory?categoryid=' + category.id);

  // Populate the subcategory dropdown with the fetched subcategories
  // Display the "name" property of each subcategory in the dropdown
  fillDataIntoSelect(selectLiquormenuSubCategory, "Please Select Sub-Category", subcategoriesByCategory, "name");

  // Reset the subcategory selection in the submenu object to avoid data mismatch
  liquormenu.liquormenu_sub_category_id = null;

  // Reset subcategory dropdown border to default neutral color 
  selectLiquormenuSubCategory.style.border = "1px solid #ced4da";
});

// Get the unit size/type dropdown element by its ID
let selectCategorySize = document.querySelector("#selectCategorySize");

// When user changes the selected unit type/size...
selectCategorySize.addEventListener("change", () => {
  // Visually mark this dropdown as valid with green border and background 
  selectCategorySize.classList.remove("is-invalid");
  selectCategorySize.classList.add("is-valid");
  selectCategorySize.style.border = "2px solid green";
  selectCategorySize.style.backgroundColor = "#c6f6d5";

  // Parse the selected unit type value (JSON string) into an object
  liquormenu.liquormenu_type_id = JSON.parse(selectCategorySize.value);

  // Generate and update the submenu item name based on the new selection
  generateLiquorMenuName();
});

// Dynamically generate the liquor menu item name from selected dropdowns and inputs
const generateLiquorMenuName = () => {

  // Check if both required fields (subcategory and size) are selected (not null)
  if (liquormenu.liquormenu_sub_category_id != null && liquormenu.liquormenu_type_id != null) {

    // Parse the selected subcategory and size objects from their dropdown values
    let subcategory = JSON.parse(selectLiquormenuSubCategory.value);
    let categorySize = JSON.parse(selectCategorySize.value);

    // Create the item name by combining subcategory name + size name
    // (You can add other parts here like brand, package type if needed)
    textLiquorMenuName.value =
      subcategory.name + " " +
      categorySize.name;

    // Remove any "None" text from the name and clean extra spaces
    // This prevents showing unnecessary words like "None" in the final name
    textLiquorMenuName.value = textLiquorMenuName.value
      .replace(/\bNone\b/gi, "")  // Remove whole word "None" (case-insensitive)
      .replace(/\s+/g, " ")       // Replace multiple spaces with a single space
      .trim();                   // Remove spaces at start/end

    // Assign this generated name back to the liquor menu object's name property
    liquormenu.name = textLiquorMenuName.value;

    // Mark the input as valid visually with green border and background
    textLiquorMenuName.classList.remove("is-invalid");
    textLiquorMenuName.classList.add("is-valid");
    textLiquorMenuName.style.border = "2px solid green";    
    textLiquorMenuName.style.backgroundColor = "#c6f6d5"; 

  } else {
    // If required fields are missing, clear the name input and reset liquor menu name property
    textLiquorMenuName.value = "";
    liquormenu.name = null;

    // Reset input border to default neutral color
    textLiquorMenuName.style.border = "1px solid #ced4da"; // ⚪ neutral border
  }
}

// Define a function to get the appropriate liquor menu status icon based on its status
const getLiquorMenuStatus = (dataOb) => {
  // If liquor menu status is "Available", show green icon (indicates available)
  if (dataOb.liquormenu_status_id.name == "Available") {
    return (
      "<i class='fa-solid fa-champagne-glasses fa-lg text-success'></i>" //  Green icon
    );
  }

  // If liquor menu status is "Out of Stock", show yellow icon (indicates warning)
  if (dataOb.liquormenu_status_id.name == "Out of Stock") {
    return (
      "<i class='fa-solid fa-champagne-glasses fa-lg text-warning'></i>" //  Yellow icon
    );
  }

  // If liquor menu status is "Discontinued", show red icon (indicates removed/discontinued)
  if (dataOb.liquormenu_status_id.name == "Discontinued") {
    return (
      "<i class='fa-solid fa-champagne-glasses fa-lg text-danger'></i>" //  Red icon
    );
  }
}


// Function to refill the liquor menu form with existing data for editing
const liquormenuMenuFormRefill = (ob, index) => {
  // Log the liquor menu object and index for debugging
  console.log("Edit", ob, index);
  // Optionally highlight the table row being edited (commented out)
  // tableEmployeeBody.children[index].style.backgroundColor = "orange";

  // Deep copy the passed liquor menu object to avoid direct mutation
  liquormenu = JSON.parse(JSON.stringify(ob));
  oldLiquormenu = JSON.parse(JSON.stringify(ob)); // Keep a copy of original data for comparison

  // Set the category dropdown value by stringifying the category object
  selectLiquormenuCategory.value = JSON.stringify(ob.liquormenu_sub_category_id.liquormenu_category_id);


  // Set subcategory dropdown to the liquor menu's current subcategory
  selectLiquormenuSubCategory.value = JSON.stringify(ob.liquormenu_sub_category_id);

  // Set package type dropdown to the liquor menu's current size/type
  selectCategorySize.value = JSON.stringify(ob.liquormenu_type_id);

  // Set price input field with liquor menu price
  textPrice.value = ob.liquormenuprice;

  // Set status dropdown to liquor menu's current status
  selectStatus.value = JSON.stringify(ob.liquormenu_status_id);

  // Set the liquor menu name input field
  textLiquorMenuName.value = ob.name;

  // Handle the liquor menu photo display
  if (ob.liquormenuphoto != null) {
    // Decode base64 photo string and set it as image source
    liquormenuPhotoPreview.src = atob(ob.liquormenuphoto);
  } else {
    // Use default placeholder image if no photo exists
    liquormenuPhotoPreview.src = "/images/liquor.jpg";
  }

  // Show the Update button (for saving edits)
  buttonUpdate.classList.remove("d-none");

  // Hide the Submit button (used for new entries)
  buttonSubmit.classList.add("d-none");

  // Show the liquor menu form offcanvas panel
  $("#offcanvasLiquorMenuForm").offcanvas("show");

  // Refresh the inner ingredient form and table to reflect current data
  refreshLiquorMenuInnerFom();
}

// Define function to delete a liquor menu record
const liquormenuMenuDelete = (dataOb, index) => {
  // Show a confirmation dialog with liquor menu details using SweetAlert2
  Swal.fire({
    title: "Are you sure to delete the following Liquor Menu?",
    html:
      "<div style='text-align:left; font-size:14px'>" +
      "📝 <b>Name:</b> " + dataOb.name + "<br>" +
      "💰 <b>Price:</b> " + dataOb.liquormenuprice + "<br>" +
      "⚙️ <b>Status:</b> " + dataOb.liquormenu_status_id.name +
      "</div>",
    icon: "warning",
    showCancelButton: true,
    width: "20em",
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, Delete Liquor Menu"
  }).then((result) => {
    // If user confirms deletion
    if (result.isConfirmed) {
      // Send a DELETE request to backend API to delete liquor menu record
      let deleteResponse = getHTTPServiceRequest("/liquormenu/delete", "DELETE", dataOb);

      // If deletion succeeded
      if (deleteResponse === "OK") {
        // Show a brief success message
        Swal.fire({
          icon: "success",
          width: "20em",
          title: "Deleted!",
          text: "Liquor Menu deleted successfully.",
          timer: 1500,
          showConfirmButton: false
        });

        // Refresh the liquor menu table and form on page without reload
        refreshLiquorMenuTable();
        refreshLiquorMenuForm();

        // Hide the liquor menu view offcanvas panel (if open)
        $("#offcanvasLiquorMenuView").offcanvas("hide");
      } else {
        // Show error alert if deletion failed, displaying error message
        Swal.fire({
          icon: "error",
          width: "20em",
          title: "Delete Failed",
          html: "❌ Something went wrong!<br><br><code>" + deleteResponse + "</code>",
          confirmButtonColor: "#d33"
        });
      }
    }
  });
}


// Define function to view/print a submenu record's details
const liquormenuMenuView = (ob, index) => {
  // Log the submenu object and its index for debugging
  console.log("View", ob, index);

  // Display submenu category name in the appropriate table cell
  tdCateory.innerText = ob.liquormenu_sub_category_id.liquormenu_category_id.name;

  // Display submenu subcategory name
  tdSubCategory.innerText = ob.liquormenu_sub_category_id.name;

  // Display the size/type name of the submenu item
  tdCategorySize.innerText = ob.liquormenu_type_id.name;

  // Display submenu price
  tdPrice.innerText = ob.liquormenuprice;

  // Display the submenu status (Available, Out of Stock, etc.)
  tdStatus.innerText = ob.liquormenu_status_id.name;

  // Display the submenu name
  tdName.innerText = ob.name;

  let propertyList = [
    { propertyName: generateItemName, dataType: "function" }, // Show generated name 
    { propertyName: "qty", dataType: "decimal" },             // Show quantity with decimal formatting
  ];

  // Fill the ingredient table with the current list of ingredients added to the submenu
  // Also attaches edit and delete handlers to each row
  fillDataIntoInnerTable(
    tableLiquorMenuItemBody,
    liquormenu.liquorMenuHasIngredientList,
    propertyList,
    liquormenuIngredientFormRefill,   // Function to refill form when editing an item
    liquormenuIngredientDelete,       // Function to remove an item from the list
    false                             // Enable row-level action buttons
  );

  // Show the submenu details panel (offcanvas) using jQuery
  $("#offcanvasLiquorMenuView").offcanvas("show");
}

// Function to handle printing the liquor menu view table
const buttonPrintRow = () => {

  // Get the full HTML of the liquor menu view table (including the table tag and contents)
  const outerTableHTML = tableLiquorMenuView.outerHTML;

  // Open a new browser window/tab for the print preview
  let newWindow = window.open();

  // Create the full HTML content for the print window including styles and the table
  let printView = `<html>
      <head>
        <title>Print Liquor Menu</title>
        <!-- Link to Bootstrap CSS for consistent styling -->
        <link rel="stylesheet" href="../../Resources/bootstrap-5.2.3/css/bootstrap.min.css">
        <style>
          /* Basic styling for the print page */
          body {
            font-family: Arial, sans-serif;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color:#efeeff;
            margin: 0;
          }
          /* Container to hold the table nicely */
          .content {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            width: 100%;
          }
          /* Table padding for readability */
          .table th, .table td {
            padding: 6px 10px;
          }
          /* Bold and left-align table headers */
          .table th {
            text-align: left;
            font-weight: bold;
          }
          /* Centered title style */
          h2 {
            text-align: center;
            margin-bottom: 15px;
          }
        </style>
      </head>
      <body>
        <div class="content">
          ${outerTableHTML}  <!-- Insert the liquor menu table HTML here -->
        </div>
      </body>
    </html>`;

  // Write the HTML content to the new window's document
  newWindow.document.write(printView);

  // Wait for 1.5 seconds to ensure all content and styles load before printing
  setTimeout(() => {
    newWindow.stop();    // Stop further loading in the print window
    newWindow.print();   // Trigger the print dialog
    newWindow.close();   // Close the print window after printing is done
  }, 1500);

  /**
   * Explanation:
   * `${tableLiquorMenuView.outerHTML}` uses template literals to embed the full HTML 
   * of a DOM element into a string.
   * - `outerHTML` gets the element plus all its children as HTML.
   * - Useful to create a printable version of a part of your page dynamically.
   */
}

// Function to check for form input errors and return error messages with icons
const checkFormError = () => {
  // Initialize a string to collect all error messages
  let formInputErrors = "";

  // Check if the category dropdown is empty (no selection)
  if (selectLiquormenuCategory.value === "") {
    formInputErrors += "❗📁 Please select a Category...! \n";
  }

  // Check if the liquor menu's subcategory is not selected (null)
  if (liquormenu.liquormenu_sub_category_id == null) {
    formInputErrors += "❗🗃️ Please select a Subcategory...! \n";
  }

  // Check if the liquor menu size/type is not selected (null)
  if (liquormenu.liquormenu_type_id == null) {
    formInputErrors += "❗📦 Please select a Package Type...! \n";
  }

  // Check if the price field is empty or null
  if (liquormenu.liquormenuprice == null) {
    formInputErrors += "❗💰 Please enter Price...! \n";
  }

  // Check if no ingredients/items have been added to the liquor menu's ingredient list
  if (liquormenu.liquorMenuHasIngredientList.length === 0) {
    formInputErrors += "❗🥫 Please select Order Item(s)...! \n";
  }

  // Return all accumulated error messages (empty string if no errors)
  return formInputErrors;
}

// Function to handle submission of the liquor menu form
const buttonLiquorMenuSubmit = () => {
  // Log the current liquor menu object for debugging
  console.log(liquormenu);

  // Step 1: Validate the form and get any errors
  let errors = checkFormError();

  // If there are no validation errors
  if (errors === "") {
    // Show a confirmation dialog with details of the liquor menu to be added
    Swal.fire({
      title: "Are you sure to add the following Liquor Menu?",
      html:
        "<div style='text-align:left; font-size:14px'>" +
        "📝 <b>Name:</b> " + liquormenu.name + "<br>" +
        "📁 <b>Category:</b> " + liquormenu.liquormenu_sub_category_id.liquormenu_category_id.name + "<br>" +
        "🗃️ <b>Subcategory:</b> " + liquormenu.liquormenu_sub_category_id.name + "<br>" +
        "📦 <b>Package Type:</b> " + liquormenu.liquormenu_type_id.name + "<br>" +
        "💰 <b>Price:</b> " + liquormenu.liquormenuprice + "<br>" +
        "⚙️ <b>Status:</b> " + liquormenu.liquormenu_status_id.name +
        "</div>",
      icon: "warning",
      width: "20em",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, Add Liquor Menu"
    }).then((result) => {
      // If user confirms adding the liquor menu
      if (result.isConfirmed) {
        // Send POST request to backend to insert the liquor menu record
        let postResponse = getHTTPServiceRequest("/liquormenu/insert", "POST", liquormenu);

        // If insertion is successful
        if (postResponse === "OK") {
          // Show a brief success message
          Swal.fire({
            icon: "success",
            width: "20em",
            title: "Saved successfully!",
            timer: 1500,
            showConfirmButton: false,
            draggable: true
          });

          // Refresh the liquor menu table and form to show updated data
          refreshLiquorMenuTable();
          refreshLiquorMenuForm();

          // Hide the liquor menu form offcanvas panel
          $("#offcanvasLiquorMenuForm").offcanvas("hide");
        } else {
          // If insertion failed, show error message with response details
          Swal.fire({
            icon: "error",
            width: "20em",
            title: "Failed to Submit",
            html: "<pre>" + postResponse + "</pre>",
            draggable: true
          });
        }
      }
    });
  } else {
    // If validation errors exist, show them in a warning alert
    Swal.fire({
      icon: "warning",
      width: "20em",
      title: "Form has following errors",
      // Replace line breaks with <br> for proper HTML display
      html: "<div style='text-align:left; font-size:14px'>" + errors.replace(/\n/g, "<br>") + "</div>",
      confirmButtonColor: "#3085d6"
    });
  }
}

// Function to check what fields have been updated between the current and old liquor menu objects
const checkFormUpdate = () => {
  // Initialize a string to collect messages about changes
  let updates = "";

  // Check that both liquor menu objects exist before comparing
  if (liquormenu != null && oldLiquormenu != null) {

    // Compare the liquor menu name
    if (liquormenu.name != oldLiquormenu.name) {
      updates += "📝 Name is updated..! \n";
    }

    // Compare the liquor menu's category name (nested inside sub_category)
    if (liquormenu.liquormenu_sub_category_id.liquormenu_category_id.name != oldLiquormenu.liquormenu_sub_category_id.liquormenu_category_id.name) {
      updates += "📁 Category is updated..! \n";
    }

    // Compare the liquor menu's subcategory name
    if (liquormenu.liquormenu_sub_category_id.name != oldLiquormenu.liquormenu_sub_category_id.name) {
      updates += "🗃️ Sub Category is updated..! \n";
    }

    // Compare the liquor menu's package type
    if (liquormenu.liquormenu_type_id.name != oldLiquormenu.liquormenu_type_id.name) {
      updates += "📦 Package Type is updated..! \n";
    }

    // Compare the liquor menu price
    if (liquormenu.liquormenuprice != oldLiquormenu.liquormenuprice) {
      updates += "💰 Price is updated..! \n";
    }

    // Compare the liquor menu status
    if (liquormenu.liquormenu_status_id.name != oldLiquormenu.liquormenu_status_id.name) {
      updates += "⚙️ Status is updated..! \n";
    }

    // Compare the liquor menu photo
    if (liquormenu.liquormenuphoto != oldLiquormenu.liquormenuphoto) {
      updates += "🖼️ Photo is updated..! \n";
    }

  }

  // Check if the number of items in the new purchase order is different from the old one
  if (liquormenu.liquorMenuHasIngredientList.length != oldLiquormenu.liquorMenuHasIngredientList.length) {

    // Log that the list of purchase order items has changed
    updates += "📄 Liquor Menu Item is changed..! \n";

  } else {

    // Counter to track how many items are the same between old and new orders
    let equalCount = 0;

    // Loop through each item in the old purchase order
    for (const oldpoitem of oldLiquormenu.liquorMenuHasIngredientList) {

      // Compare with each item in the new purchase order
      for (const newpoitem of liquormenu.liquorMenuHasIngredientList) {

        // If the ingredient IDs match, increment the counter
        if (oldpoitem.ingredients_id.id == newpoitem.ingredients_id.id) {
          equalCount = equalCount + 1;
        }
      }
    }

    // If the count of matching items is not equal to the number of new items,
    // it means the items themselves have changed
    if (equalCount != liquormenu.liquorMenuHasIngredientList.length) {
      updates += "📄 Liquor Menu Item is changed..! \n";
    } else {

      // If the items are the same, check if their quantities have changed
      for (const oldpoitem of oldLiquormenu.liquorMenuHasIngredientList) {
        for (const newpoitem of liquormenu.liquorMenuHasIngredientList) {

          // If the ingredient IDs match but the quantity is different
          if (oldpoitem.ingredients_id.id == newpoitem.ingredients_id.id &&
            oldpoitem.qty != newpoitem.qty) {

            // Log that the quantity has been changed
            updates += "🔢 Liquor Menu Qty is changed..! \n";
            break; // No need to check more once a change is found
          }
        }
      }
    }
  }

  // Return all collected update messages (empty string if no changes)
  return updates;
}


// Function to handle updating the liquor menu form data
const buttonLiquorMenuUpdate = () => {
  // Step 1: Validate the form and collect any errors
  let errors = checkFormError(); // Checks required fields and returns error messages

  // Proceed only if no errors
  if (errors === "") {
    // Step 2: Check if there are any changes compared to the old data
    let updates = checkFormUpdate(); // Returns a string describing what fields were changed

    // If no updates detected, inform the user
    if (updates === "") {
      Swal.fire({
        title: "No Updates",
        text: "Nothing to update..",
        icon: "info",
        width: "20em",
        showConfirmButton: false,
        timer: 1500
      });
    } else {
      // If there are updates, ask the user to confirm before applying changes
      Swal.fire({
        title: "Are you sure you want to update the following changes?",
        // Display the list of changes with line breaks converted for HTML
        html: "<div style='text-align:left; font-size:14px'>" + updates.replace(/\n/g, "<br>") + "</div>",
        icon: "warning",
        width: "20em",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, Update Sub Menu"
      }).then((result) => {
        // If user confirms the update
        if (result.isConfirmed) {
          // Send PUT request to update the liquor menu record on the backend
          let putResponse = getHTTPServiceRequest("/liquormenu/update", "PUT", liquormenu);

          // If update was successful
          if (putResponse === "OK") {
            // Show success message briefly
            Swal.fire({
              title: "Updated Successfully!",
              icon: "success",
              width: "20em",
              showConfirmButton: false,
              timer: 1500,
              draggable: true
            });

            // Refresh the liquor menu table to reflect updated data
            refreshLiquorMenuTable();

            // Reset and refresh the liquor menu form to default state
            refreshLiquorMenuForm();

            // Close the liquor menu offcanvas form panel
            $("#offcanvasLiquorMenuForm").offcanvas("hide");
          } else {
            // If update failed, show error message with backend response
            Swal.fire({
              title: "Failed to update!",
              html: "<pre>" + putResponse + "</pre>",
              icon: "error",
              width: "20em",
              showConfirmButton: false,
              timer: 2000,
              draggable: true
            });
          }
        }
      });
    }
  } else {
    // If validation errors exist, show them to the user in a warning alert
    Swal.fire({
      title: "Form has following errors!",
      html: "<div style='text-align:left; font-size:14px'>" + errors.replace(/\n/g, "<br>") + "</div>",
      icon: "warning",
      width: "20em",
      showConfirmButton: false,
      timer: 2000,
      draggable: true
    });
  }
}

// Define a function to clear liquor menu photo
function clearLiquorMenuPhoto() {
  // Get the photo file input element by ID
  const photoInput = document.getElementById("liquormenuPhotoInput");
  if (photoInput) {
    // Clear the selected file so the input is reset
    photoInput.value = "";
  }

  // Get the photo preview image element by ID
  const previewImage = document.getElementById("liquormenuPhotoPreview");
  if (previewImage) {
    // Reset the preview image to the default placeholder image
    previewImage.src = "/images/liquor.jpg"; // Update path if needed
  }

  // If the liquormenu object exists (used for data binding), clear its photo data
  if (typeof liquormenu !== "undefined") {
    liquormenu.liquormenuphoto = null;
  }
}

// Function to clear the liquor menu main form after confirming with the user
const clearLiquorMenuForm = () => {
  // Show confirmation dialog with SweetAlert2
  Swal.fire({
    title: "Are you sure to refresh the form?",
    icon: "question",
    width: "20em",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, Clear Form",
    cancelButtonText: "Cancel"
  }).then((result) => {
    if (result.isConfirmed) {
      // If user confirms, reset the form fields by calling the refresh function
      refreshLiquorMenuForm();
      // Show success message after form is cleared
      Swal.fire({
        title: "Form cleared!",
        icon: "success",
        width: "20em",
        timer: 1200,
        showConfirmButton: false,
        draggable: true
      });
    }
  });
}

// Function to clear the liquor menu inner form (e.g., ingredients section) after confirming with the user
const clearLiquorMenuInnerForm = () => {
  // Show confirmation dialog with SweetAlert2
  Swal.fire({
    title: "Are you sure to refresh the form?",
    icon: "question",
    width: "20em",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, Clear Form",
    cancelButtonText: "Cancel"
  }).then((result) => {
    if (result.isConfirmed) {
      // If user confirms, reset the inner form fields by calling the refresh function
      refreshLiquorMenuInnerFom();
      // Show success message after form is cleared
      Swal.fire({
        title: "Form cleared!",
        icon: "success",
        width: "20em",
        timer: 1200,
        showConfirmButton: false,
        draggable: true
      });
    }
  });
}
